#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

// addNode, deleteNode, LeafNode, Level of Node

struct node {
	int data;
	node* lchild;
	node* rchild;
}typedef node;

node* addNode(node* root, int data) { // low num -> go left, high num -> go right
	if (root != NULL) {
		if (root->data > data) { // go left
			root->lchild = addNode(root->lchild, data);
		}
		else if (root->data < data) { // go right
			root->rchild = addNode(root->rchild, data);
		}
		else { // same
			printf("this data is overlapped!\n");
		}
	}
	else {
		root = (node*)malloc(sizeof(node));
		root->lchild = root->rchild = NULL;
		root->data = data;
	}
	return root;
}

// 1)
// 삭제될 노드의 자리에는 이진 탐색 트리의 규칙을 만족할 수 있는 노드로 교체가 되어야 한다.
// 즉, 삭제될 노드의 왼쪽 자식트리보다 크고, 삭제될 노드의 오른쪽 자식트리보단 작은 규칙이 만족되는 노드여야 한다.
// ex)     5
//       3   8
//      2 4 6 9
// 에서 5를 삭제할 경우 3보다 크고 8보다 작은 노드인 6을 교체해주면 된다.
//         6
//       3   8
//      2 4   9

// 2)
// ex)    4
//       3 8
//      2   9
// 에서 4를 삭제할 경우에는 3보다 크고 8보다 작은 조건을 만족하는 수가 없다.
// 이럴땐 1.삭제될 노드의 오른쪽 서브트리에서의 가장 왼쪽에 위치한 노드 (오른쪽 서브트리에서 가장 작은 수)
//		  2.삭제될 노드의 왼쪽 서브트리에서의 가장 오른쪽에 위치한 노드 (왼쪽 서브트리에서 가장 큰 수)
// 둘 중 하나를 채택하여 사용하면 된다. 1을 선택해서 만들어보자.
//      8
//     3 9
//    2

// 그럼 1)의 경우는 딱히 필요없고 2)의 경우만 적용시켜도 되지 않을까?

node* deleteNode(node* root,int data) {
	if (root) {
		if (root->data != data) {
		deleteNode(root->lchild, data);
		deleteNode(root->rchild, data);
		}
		else if (root->data = data) {
			node* deltmp = root;
		}
	}
	return root;
}

int LeafNode(node* root) {
	if (root) {
		if (!root->lchild && !root->rchild) { // LeafNode
			return 1;
		}
		else {
			return LeafNode(root->lchild) + LeafNode(root->rchild);
		}
	}
	else
		return 0;
}

int MXlevelOfNode(node* root) {
	int levloflchild;
	int levlofrchild;
	if (root) {
		if (!root->lchild && !root->rchild)
			return 1;
		else {
			levloflchild = MXlevelOfNode(root->lchild);
			levlofrchild = MXlevelOfNode(root->rchild);
			return levloflchild > levlofrchild ? levloflchild + 1 : levlofrchild + 1;
		}
	}
	else
		return 0;
}

void showTree(node* root) {
	// preorder traversal
	if (root) {
		printf("%d ", root->data);
		showTree(root->lchild);
		showTree(root->rchild);
	}
}

int main() {
	node* root = NULL;
	
	int n = 1;
	while (n) {
		printf("1)add 2)delete 3)show tree 4)show how many leaves 5)show level of the tree 6)exit the program : ");
		scanf("%d", &n);
		switch (n) {
		case 1:
			int data;
			printf("insert data : ");
			scanf("%d", &data);
			root = addNode(root, data);
			break;
		case 2:
			int data;
			printf("delete data : ");
			scanf("%d", &data);
			root = deleteNode(root, data);
			break;
		case 3:
			showTree(root);
			printf("\n");
			break;
		case 4:
			printf("The tree has %d leaves\n", LeafNode(root));
			break;
		case 5:
			printf("The tree's level is %d\n", MXlevelOfNode(root));
			break;
		case 6:
			n = 0;
			break;
		default:
			break;
		}
	}
}
