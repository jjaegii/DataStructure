#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

// addNode, deleteNode, LeafNode, Level of Node

struct node {
	int data;
	node* lchild;
	node* rchild;
}typedef node;

node* addNode(node* root, int data) { // low num -> go left, high num -> go right
	if (root != NULL) {
		if (root->data > data) { // go left
			root->lchild = addNode(root->lchild, data);
		}
		else if (root->data < data) { // go right
			root->rchild = addNode(root->rchild, data);
		}
		else { // same
			printf("this data is overlapped!\n");
		}
	}
	else {
		root = (node*)malloc(sizeof(node));
		root->lchild = root->rchild = NULL;
		root->data = data;
	}
	return root;
}

//node* deleteNode(node* root) {
//
//	return root;
//}

int LeafNode(node* root) {
	if (root) {
		if (!root->lchild && !root->rchild) { // LeafNode
			return 1;
		}
		else {
			return LeafNode(root->lchild) + LeafNode(root->rchild);
		}
	}
	else
		return 0;
}

int MXlevelOfNode(node* root) {
	int levloflchild;
	int levlofrchild;
	if (root) {
		if (!root->lchild && !root->rchild)
			return 1;
		else {
			levloflchild = MXlevelOfNode(root->lchild);
			levlofrchild = MXlevelOfNode(root->rchild);
			return levloflchild > levlofrchild ? levloflchild + 1 : levlofrchild + 1;
		}
	}
	else
		return 0;
}

void showTree(node* root) {
	// preorder traversal
	if (root != NULL) {
		printf("%d ", root->data);
		showTree(root->lchild);
		showTree(root->rchild);
	}
}

int main() {
	node* root = NULL;
	
	int n = 1;
	while (n) {
		printf("1)add 2)delete 3)show tree 4)show how many leaves 5)show level of the tree 6)exit the program : ");
		scanf("%d", &n);
		switch (n) {
		case 1:
			int data;
			printf("insert data : ");
			scanf("%d", &data);
			root = addNode(root, data);
			break;
		case 2:

			break;
		case 3:
			showTree(root);
			printf("\n");
			break;
		case 4:
			printf("The tree has %d leaves\n", LeafNode(root));
			break;
		case 5:
			printf("The tree's level is %d\n", MXlevelOfNode(root));
			break;
		case 6:
			n = 0;
			break;
		default:
			break;
		}
	}
}
